class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
       int[][][] dp = new int[strs.length + 1][m + 1][n + 1];

        // Initialize all with -1 to detect uncomputed state
        for (int i = 0; i <= strs.length; i++)
            for (int j = 0; j <= m; j++)
                for (int k = 0; k <= n; k++)
                    dp[i][j][k] = -1;

        return helper(0, strs, m, n, dp);
    }

    private static int helper(int ind, String[] strs, int m, int n, int[][][] dp) {
        if (ind >= strs.length) return 0;
        if (dp[ind][m][n] != -1) return dp[ind][m][n];

        int zeros = 0, ones = 0;
        for (char c : strs[ind].toCharArray()) {
            if (c == '0') zeros++;
            else ones++;
        }

        int pick = 0;
        if (zeros <= m && ones <= n) {
            pick = 1 + helper(ind + 1, strs, m - zeros, n - ones, dp);
        }

        int notPick = helper(ind + 1, strs, m, n, dp);

        return dp[ind][m][n] = Math.max(pick, notPick);
    }
}
